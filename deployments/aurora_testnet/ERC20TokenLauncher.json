{
  "address": "0x4E3016da4e642233C332710ADBa169A92E096Fad",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenLaunchName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "fundTokenLaunchCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getListOfTokenLaunchCampaigns",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_tokenAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantityEarlyUsersPool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_quantityLiquidityPool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_expiringDay",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_campaignOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_temporaryLiquidityToken",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_launchName",
              "type": "string"
            }
          ],
          "internalType": "struct ERC20TokenLauncher.tokenLaunchCampaignStruct[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenLaunchName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "receivefundFromTokenLaunchCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_percentageEarlyUsersPool",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_percentageLiquidityPool",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_daysBeforeExpiring",
          "type": "uint128"
        },
        {
          "internalType": "string",
          "name": "_tokenLaunchName",
          "type": "string"
        }
      ],
      "name": "setUpTokenLaunchCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "tokenLaunchCampaign",
      "outputs": [
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantityEarlyUsersPool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantityLiquidityPool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiringDay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_campaignOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_temporaryLiquidityToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_launchName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8613e7331026f1e656793287b408a9c8cc12ab747c490c32b99734ecc12c05b8",
  "receipt": {
    "to": null,
    "from": "0xb82F1f95C89cb666f53e6461171311d6aF9F63Ae",
    "contractAddress": "0x4E3016da4e642233C332710ADBa169A92E096Fad",
    "transactionIndex": 0,
    "gasUsed": "1970017",
    "logsBloom": "0x
    "blockHash": "0x73d05672f792f315cb18f34836f04af41c4f0d1d17c9bb344de084d7b54d0e07",
    "transactionHash": "0x8613e7331026f1e656793287b408a9c8cc12ab747c490c32b99734ecc12c05b8",
    "logs": [],
    "blockNumber": 82182638,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f73866dacab0ebd221622b3524b9c9fd",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenLaunchName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"fundTokenLaunchCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListOfTokenLaunchCampaigns\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantityEarlyUsersPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantityLiquidityPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiringDay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_campaignOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_temporaryLiquidityToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_launchName\",\"type\":\"string\"}],\"internalType\":\"struct ERC20TokenLauncher.tokenLaunchCampaignStruct[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenLaunchName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"receivefundFromTokenLaunchCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_percentageEarlyUsersPool\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_percentageLiquidityPool\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_daysBeforeExpiring\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"_tokenLaunchName\",\"type\":\"string\"}],\"name\":\"setUpTokenLaunchCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenLaunchCampaign\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantityEarlyUsersPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantityLiquidityPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiringDay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_campaignOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_temporaryLiquidityToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_launchName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20TokenLauncher.sol\":\"ERC20TokenLauncher\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9c0eb3b0e11d2480d49991dc384f1e5f9c9b9967cc81944d50916a9b9c6c4984\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/ERC20MintableBurnableToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ncontract ERC20MintableBurnableToken is ERC20, ERC20Burnable {\\n    address owner;\\n\\n    constructor (string memory name, string memory symbol, address _owner) public ERC20(name, symbol) {\\n        // Mint 100 tokens to msg.sender\\n        // Similar to how\\n        // 1 dollar = 100 cents\\n        // 1 token = 1 * (10 ** decimals)\\n        owner=_owner;\\n    }\\n\\n    function mint(address receiver, uint256 quantity) public{\\n        require(msg.sender==owner);\\n        _mint(receiver, quantity * 10 ** uint(decimals()));\\n    }\\n}\",\"keccak256\":\"0x556ace3fb109c66fb24df64eac80fbefc9b493fce4cfe0e60271a5fd6d58b314\",\"license\":\"MIT\"},\"contracts/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC20Token is ERC20 {\\n    constructor (string memory name, string memory symbol, uint quantity) ERC20(name, symbol) public {\\n        // Mint 100 tokens to msg.sender\\n        // Similar to how\\n        // 1 dollar = 100 cents\\n        // 1 token = 1 * (10 ** decimals)\\n        _mint(msg.sender, quantity * 10 ** uint(decimals()));\\n    }\\n}\",\"keccak256\":\"0xfe26845002426eb6acf1dd4500807bc99d5294ff27b82391a46cceb9d5e65a25\",\"license\":\"MIT\"},\"contracts/ERC20TokenLauncher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\nimport \\\"./ERC20Token.sol\\\";\\nimport \\\"./ERC20MintableBurnableToken.sol\\\";\\n\\ncontract ERC20TokenLauncher {\\n\\n  struct tokenLaunchCampaignStruct{ \\n    address _tokenAddr;\\n    uint256 _quantityEarlyUsersPool;\\n    uint256 _quantityLiquidityPool;\\n    uint _expiringDay;\\n    address _campaignOwner;\\n    address _temporaryLiquidityToken;\\n    string _launchName;\\n\\n  }\\n\\n  // index of created contracts\\n  mapping(string => tokenLaunchCampaignStruct) public tokenLaunchCampaign;\\n  tokenLaunchCampaignStruct[] listOfTokenLaunchCampaigns;\\n\\n  function getListOfTokenLaunchCampaigns() public view returns ( tokenLaunchCampaignStruct[] memory){\\n    return listOfTokenLaunchCampaigns;\\n  }\\n  \\n\\n  function setUpTokenLaunchCampaign(address _tokenAddr, uint128 _percentageEarlyUsersPool, uint128 _percentageLiquidityPool, uint128 _daysBeforeExpiring, string memory _tokenLaunchName ) public {\\n    require(_percentageEarlyUsersPool>0 && _percentageEarlyUsersPool<100);\\n    require(_percentageLiquidityPool>0 && _percentageLiquidityPool<100);\\n    //require(_daysBeforeExpiring>0 && _percentageLiquidityPool<180);\\n    require(tokenLaunchCampaign[_tokenLaunchName]._campaignOwner==0x0000000000000000000000000000000000000000 || msg.sender==tokenLaunchCampaign[_tokenLaunchName]._campaignOwner);\\n    ERC20 token = ERC20(_tokenAddr);\\n    uint256 totalSupply = token.totalSupply();\\n\\n\\n\\n    string memory tokenName= string(abi.encodePacked(\\\"tl\\\",_tokenLaunchName));\\n    ERC20MintableBurnableToken liquidityToken = new ERC20MintableBurnableToken(tokenName, tokenName, address(this));\\n\\n    tokenLaunchCampaignStruct memory campaignStruct;\\n    campaignStruct._launchName=_tokenLaunchName;\\n    campaignStruct._tokenAddr=address(token);\\n    campaignStruct._quantityEarlyUsersPool=totalSupply*_percentageEarlyUsersPool/100;\\n    campaignStruct._quantityLiquidityPool=totalSupply*_percentageLiquidityPool/100;\\n    campaignStruct._expiringDay=block.timestamp+(_daysBeforeExpiring*86400);\\n    campaignStruct._campaignOwner=msg.sender;\\n    campaignStruct._temporaryLiquidityToken=address(liquidityToken);\\n\\n    tokenLaunchCampaign[_tokenLaunchName] = campaignStruct;\\n    listOfTokenLaunchCampaigns.push(campaignStruct);\\n\\n    token.transferFrom(msg.sender, address(this),  (tokenLaunchCampaign[_tokenLaunchName]._quantityEarlyUsersPool+tokenLaunchCampaign[_tokenLaunchName]._quantityLiquidityPool));\\n  }\\n\\n\\n  function fundTokenLaunchCampaign(string memory _tokenLaunchName, uint256 quantity ) external {\\n    require(tokenLaunchCampaign[_tokenLaunchName]._campaignOwner!=0x0000000000000000000000000000000000000000, \\\"LaunchCampaign has not been approved yet\\\");\\n    \\n    //Wrapped Near Fungible Token\\n    ERC20Token token = ERC20Token(0x4861825E75ab14553E5aF711EbbE6873d369d146);\\n    token.transferFrom(msg.sender, address(this),  quantity);\\n\\n    ERC20MintableBurnableToken tl_token = ERC20MintableBurnableToken(tokenLaunchCampaign[_tokenLaunchName]._temporaryLiquidityToken);\\n    tl_token.mint(msg.sender, quantity);\\n  }\\n\\n\\n  function receivefundFromTokenLaunchCampaign(string memory _tokenLaunchName, uint256 quantity) external {\\n    require( block.timestamp > tokenLaunchCampaign[_tokenLaunchName]._expiringDay);\\n    //TODO - Sposto i token dal contratto al pool di liquidita' e invio gli lp_ERC20 al founder principale?\\n    //TOFO - Devo contare quanti Near sono stati messi in sto cazzo di contratto\\n\\n    ERC20MintableBurnableToken tl_token = ERC20MintableBurnableToken(tokenLaunchCampaign[_tokenLaunchName]._temporaryLiquidityToken);\\n\\n    uint256 quantityToMove = tokenLaunchCampaign[_tokenLaunchName]._quantityEarlyUsersPool*((quantity * 10 ** 18)/tl_token.totalSupply());\\n    tokenLaunchCampaign[_tokenLaunchName]._quantityEarlyUsersPool-=quantityToMove;\\n\\n    ERC20Token token = ERC20Token(tokenLaunchCampaign[_tokenLaunchName]._tokenAddr);\\n    token.transfer(msg.sender, quantityToMove);\\n\\n    tl_token.burnFrom(msg.sender, (quantity * 10 ** 18));\\n  }\\n\\n}\\n\\n\\n\",\"keccak256\":\"0x3ac43fba45d2277456da1bc7a023e4d81d9f23f1451c53ef16a0ff7cc95fed89\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200005e5760003560e01c80630b901dbe1462000063578063179f5c79146200007c578063402e85821462000093578063a0afa28a14620000b5578063ed84968a14620000e1575b600080fd5b6200007a6200007436600462000eb6565b620000f8565b005b6200007a6200008d36600462000eb6565b62000273565b6200009d620004da565b604051620000ac91906200102c565b60405180910390f35b620000cc620000c636600462000e77565b6200061a565b604051620000ac979695949392919062000fd8565b6200007a620000f236600462000db2565b62000706565b6000826040516200010a919062000f51565b908152604051908190036020019020600401546001600160a01b03166200014e5760405162461bcd60e51b8152600401620001459062001138565b60405180910390fd5b6040516323b872dd60e01b8152734861825e75ab14553e5af711ebbe6873d369d1469081906323b872dd906200018d9033903090879060040162000f9b565b602060405180830381600087803b158015620001a857600080fd5b505af1158015620001bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001e3919062000e4e565b5060008084604051620001f7919062000f51565b908152604051908190036020018120600501546340c10f1960e01b82526001600160a01b0316915081906340c10f199062000239903390879060040162000fbf565b600060405180830381600087803b1580156200025457600080fd5b505af115801562000269573d6000803e3d6000fd5b5050505050505050565b60008260405162000285919062000f51565b9081526020016040518091039020600301544211620002a357600080fd5b60008083604051620002b6919062000f51565b908152602001604051809103902060050160009054906101000a90046001600160a01b031690506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200031957600080fd5b505afa1580156200032e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000354919062000efd565b83670de0b6b3a764000002816200036757fe5b046000856040516200037a919062000f51565b90815260200160405180910390206001015402905080600085604051620003a2919062000f51565b9081526040519081900360200181206001018054929092039091556000908190620003cf90879062000f51565b9081526040519081900360200181205463a9059cbb60e01b82526001600160a01b03169150819063a9059cbb906200040e903390869060040162000fbf565b602060405180830381600087803b1580156200042957600080fd5b505af11580156200043e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000464919062000e4e565b5060405163079cc67960e41b81526001600160a01b038416906379cc6790906200049f903390670de0b6b3a764000089029060040162000fbf565b600060405180830381600087803b158015620004ba57600080fd5b505af1158015620004cf573d6000803e3d6000fd5b505050505050505050565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015620006115760008481526020908190206040805160e0810182526007860290920180546001600160a01b039081168452600180830154858701526002808401548686015260038401546060870152600484015483166080870152600584015490921660a086015260068301805485516101009382161593909302600019011692909204601f81018790048702820187019094528381529394919360c08601939092830182828015620005f85780601f10620005cc57610100808354040283529160200191620005f8565b820191906000526020600020905b815481529060010190602001808311620005da57829003601f168201915b50505050508152505081526020019060010190620004fe565b50505050905090565b805180820160209081018051600082529282019382019390932091909252805460018083015460028085015460038601546004870154600588015460068901805460408051601f6000199b841615610100029b909b01909216979097049889018c90048c0281018c019096528786526001600160a01b039889169a969994989397928416969190931694929190830182828015620006fc5780601f10620006d057610100808354040283529160200191620006fc565b820191906000526020600020905b815481529060010190602001808311620006de57829003601f168201915b5050505050905087565b6000846001600160801b03161180156200072957506064846001600160801b0316105b6200073357600080fd5b6000836001600160801b03161180156200075657506064836001600160801b0316105b6200076057600080fd5b60008160405162000772919062000f51565b908152604051908190036020019020600401546001600160a01b03161580620007c95750600081604051620007a8919062000f51565b90815260405190819003602001902060040154336001600160a01b03909116145b620007d357600080fd5b60008590506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200081457600080fd5b505afa15801562000829573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200084f919062000efd565b905060608360405160200162000866919062000f6f565b604051602081830303815290604052905060008182306040516200088a9062000c2e565b6200089893929190620010f6565b604051809103906000f080158015620008b5573d6000803e3d6000fd5b509050620008c262000c3c565b60c081018690526001600160a01b038516815260646001600160801b038a16850204602082015260646001600160801b038916850204604080830191909152426001600160801b03620151808a02160160608301523360808301526001600160a01b03831660a08301525181906000906200093f90899062000f51565b9081526040805160209281900383019020835181546001600160a01b03199081166001600160a01b03928316178355858501516001840155928501516002830155606085015160038301556080850151600483018054851691831691909117905560a085015160058301805490941691161790915560c083015180519192620009d19260068501929091019062000c94565b5050600180548082018255600091909152825160079091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6810180546001600160a01b039384166001600160a01b03199182161782556020808701517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf785015560408701517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf885015560608701517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf985015560808701517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfa8501805491871691841691909117905560a08701517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfb850180549190961692169190911790935560c08501518051869550919362000b4e937fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfc019291019062000c94565b505050846001600160a01b03166323b872dd333060008a60405162000b74919062000f51565b90815260200160405180910390206002015460008b60405162000b98919062000f51565b908152602001604051809103902060010154016040518463ffffffff1660e01b815260040162000bcb9392919062000f9b565b602060405180830381600087803b15801562000be657600080fd5b505af115801562000bfb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c21919062000e4e565b5050505050505050505050565b6110b880620011cd83390190565b6040518060e0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000cd757805160ff191683800117855562000d07565b8280016001018555821562000d07579182015b8281111562000d0757825182559160200191906001019062000cea565b5062000d1592915062000d19565b5090565b5b8082111562000d15576000815560010162000d1a565b600082601f83011262000d41578081fd5b813567ffffffffffffffff8082111562000d59578283fd5b604051601f8301601f19168101602001828111828210171562000d7a578485fd5b60405282815292508284830160200186101562000d9657600080fd5b8260208601602083013760006020848301015250505092915050565b600080600080600060a0868803121562000dca578081fd5b85356001600160a01b038116811462000de1578182fd5b9450602086013562000df381620011b3565b9350604086013562000e0581620011b3565b9250606086013562000e1781620011b3565b9150608086013567ffffffffffffffff81111562000e33578182fd5b62000e418882890162000d30565b9150509295509295909350565b60006020828403121562000e60578081fd5b8151801515811462000e70578182fd5b9392505050565b60006020828403121562000e89578081fd5b813567ffffffffffffffff81111562000ea0578182fd5b62000eae8482850162000d30565b949350505050565b6000806040838503121562000ec9578182fd5b823567ffffffffffffffff81111562000ee0578283fd5b62000eee8582860162000d30565b95602094909401359450505050565b60006020828403121562000f0f578081fd5b5051919050565b6001600160a01b03169052565b6000815180845262000f3d81602086016020860162001180565b601f01601f19169290920160200192915050565b6000825162000f6581846020870162001180565b9190910192915050565b6000611d1b60f21b8252825162000f8e81600285016020870162001180565b9190910160020192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b600060018060a01b03808a168352886020840152876040840152866060840152808616608084015280851660a08401525060e060c08301526200101f60e083018462000f23565b9998505050505050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015620010e857603f19898403018552815160e06200107385835162000f16565b81890151858a0152878201518886015260608083015190860152608080830151620010a18288018262000f16565b505060a080830151620010b78288018262000f16565b505060c091820151918501819052620010d38582018362000f23565b96890196945050509086019060010162001050565b509098975050505050505050565b6000606082526200110b606083018662000f23565b82810360208401526200111f818662000f23565b91505060018060a01b0383166040830152949350505050565b60208082526028908201527f4c61756e636843616d706169676e20686173206e6f74206265656e20617070726040820152671bdd9959081e595d60c21b606082015260800190565b60005b838110156200119d57818101518382015260200162001183565b83811115620011ad576000848401525b50505050565b6001600160801b0381168114620011c957600080fd5b5056fe60806040523480156200001157600080fd5b50604051620010b8380380620010b8833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405260209081015185519093508592508491620001bd9160039185019062000210565b508051620001d390600490602084019062000210565b5050600580546001600160a01b0390931661010002610100600160a81b031960ff19909416601217939093169290921790915550620002ac915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025357805160ff191683800117855562000283565b8280016001018555821562000283579182015b828111156200028357825182559160200191906001019062000266565b506200029192915062000295565b5090565b5b8082111562000291576000815560010162000296565b610dfc80620002bc6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b41146102e3578063a457c2d7146102eb578063a9059cbb14610317578063dd62ed3e14610343576100ea565b806342966c681461027457806370a082311461029157806379cc6790146102b7576100ea565b806323b872dd116100c857806323b872dd146101c6578063313ce567146101fc578063395093511461021a57806340c10f1914610246576100ea565b806306fdde03146100ef578063095ea7b31461016c57806318160ddd146101ac575b600080fd5b6100f7610371565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610131578181015183820152602001610119565b50505050905090810190601f16801561015e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101986004803603604081101561018257600080fd5b506001600160a01b038135169060200135610407565b604080519115158252519081900360200190f35b6101b4610424565b60408051918252519081900360200190f35b610198600480360360608110156101dc57600080fd5b506001600160a01b0381358116916020810135909116906040013561042a565b6102046104b1565b6040805160ff9092168252519081900360200190f35b6101986004803603604081101561023057600080fd5b506001600160a01b0381351690602001356104ba565b6102726004803603604081101561025c57600080fd5b506001600160a01b038135169060200135610508565b005b6102726004803603602081101561028a57600080fd5b5035610541565b6101b4600480360360208110156102a757600080fd5b50356001600160a01b0316610555565b610272600480360360408110156102cd57600080fd5b506001600160a01b038135169060200135610570565b6100f76105ca565b6101986004803603604081101561030157600080fd5b506001600160a01b03813516906020013561062b565b6101986004803603604081101561032d57600080fd5b506001600160a01b038135169060200135610693565b6101b46004803603604081101561035957600080fd5b506001600160a01b03813581169160200135166106a7565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103fd5780601f106103d2576101008083540402835291602001916103fd565b820191906000526020600020905b8154815290600101906020018083116103e057829003601f168201915b5050505050905090565b600061041b6104146106d2565b84846106d6565b50600192915050565b60025490565b60006104378484846107c2565b6104a7846104436106d2565b6104a285604051806060016040528060288152602001610cec602891396001600160a01b038a166000908152600160205260408120906104816106d2565b6001600160a01b03168152602081019190915260400160002054919061091d565b6106d6565b5060019392505050565b60055460ff1690565b600061041b6104c76106d2565b846104a285600160006104d86106d2565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906109b4565b60055461010090046001600160a01b0316331461052457600080fd5b61053d826105306104b1565b60ff16600a0a8302610a15565b5050565b61055261054c6106d2565b82610b05565b50565b6001600160a01b031660009081526020819052604090205490565b60006105a782604051806060016040528060248152602001610d14602491396105a08661059b6106d2565b6106a7565b919061091d565b90506105bb836105b56106d2565b836106d6565b6105c58383610b05565b505050565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103fd5780601f106103d2576101008083540402835291602001916103fd565b600061041b6106386106d2565b846104a285604051806060016040528060258152602001610da260259139600160006106626106d2565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919061091d565b600061041b6106a06106d2565b84846107c2565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661071b5760405162461bcd60e51b8152600401808060200182810382526024815260200180610d7e6024913960400191505060405180910390fd5b6001600160a01b0382166107605760405162461bcd60e51b8152600401808060200182810382526022815260200180610ca46022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166108075760405162461bcd60e51b8152600401808060200182810382526025815260200180610d596025913960400191505060405180910390fd5b6001600160a01b03821661084c5760405162461bcd60e51b8152600401808060200182810382526023815260200180610c5f6023913960400191505060405180910390fd5b6108578383836105c5565b61089481604051806060016040528060268152602001610cc6602691396001600160a01b038616600090815260208190526040902054919061091d565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546108c390826109b4565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156109ac5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610971578181015183820152602001610959565b50505050905090810190601f16801561099e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610a0e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610a70576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610a7c600083836105c5565b600254610a8990826109b4565b6002556001600160a01b038216600090815260208190526040902054610aaf90826109b4565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038216610b4a5760405162461bcd60e51b8152600401808060200182810382526021815260200180610d386021913960400191505060405180910390fd5b610b56826000836105c5565b610b9381604051806060016040528060228152602001610c82602291396001600160a01b038516600090815260208190526040902054919061091d565b6001600160a01b038316600090815260208190526040902055600254610bb99082610c01565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600082821115610c58576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122085f23da5b3616d1477ea1c0e47034736c609a17e8be075f3d759708174c7bac464736f6c634300060c0033a2646970667358221220904cb4466b1831ba0829c20a612e279ead8d8fff2e7b3db4b4c6db502eb1132364736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2359,
        "contract": "contracts/ERC20TokenLauncher.sol:ERC20TokenLauncher",
        "label": "tokenLaunchCampaign",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_struct(tokenLaunchCampaignStruct)2355_storage)"
      },
      {
        "astId": 2362,
        "contract": "contracts/ERC20TokenLauncher.sol:ERC20TokenLauncher",
        "label": "listOfTokenLaunchCampaigns",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(tokenLaunchCampaignStruct)2355_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(tokenLaunchCampaignStruct)2355_storage)dyn_storage": {
        "base": "t_struct(tokenLaunchCampaignStruct)2355_storage",
        "encoding": "dynamic_array",
        "label": "struct ERC20TokenLauncher.tokenLaunchCampaignStruct[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_struct(tokenLaunchCampaignStruct)2355_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct ERC20TokenLauncher.tokenLaunchCampaignStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(tokenLaunchCampaignStruct)2355_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(tokenLaunchCampaignStruct)2355_storage": {
        "encoding": "inplace",
        "label": "struct ERC20TokenLauncher.tokenLaunchCampaignStruct",
        "members": [
          {
            "astId": 2342,
            "contract": "contracts/ERC20TokenLauncher.sol:ERC20TokenLauncher",
            "label": "_tokenAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2344,
            "contract": "contracts/ERC20TokenLauncher.sol:ERC20TokenLauncher",
            "label": "_quantityEarlyUsersPool",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2346,
            "contract": "contracts/ERC20TokenLauncher.sol:ERC20TokenLauncher",
            "label": "_quantityLiquidityPool",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2348,
            "contract": "contracts/ERC20TokenLauncher.sol:ERC20TokenLauncher",
            "label": "_expiringDay",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2350,
            "contract": "contracts/ERC20TokenLauncher.sol:ERC20TokenLauncher",
            "label": "_campaignOwner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2352,
            "contract": "contracts/ERC20TokenLauncher.sol:ERC20TokenLauncher",
            "label": "_temporaryLiquidityToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 2354,
            "contract": "contracts/ERC20TokenLauncher.sol:ERC20TokenLauncher",
            "label": "_launchName",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}